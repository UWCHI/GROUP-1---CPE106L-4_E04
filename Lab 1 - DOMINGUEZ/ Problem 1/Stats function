def calculate_mean(data):
    """
    Calculates the mean (average) of a list of numbers.
    :param data: List of numbers.
    :return: Mean of the numbers.
    """
    if not data:
        raise ValueError("Input data cannot be empty.")
    return sum(data) / len(data)


def calculate_median(data):
    """
    Calculates the median of a list of numbers.
    :param data: List of numbers.
    :return: Median of the numbers.
    """
    if not data:
        raise ValueError("Input data cannot be empty.")
    
    sorted_data = sorted(data)
    size = len(sorted_data)
    midpoint = size // 2

    if size % 2 == 0:  # Even number of elements
        return (sorted_data[midpoint - 1] + sorted_data[midpoint]) / 2
    else:  # Odd number of elements
        return sorted_data[midpoint]


def calculate_mode(data):
    """
    Calculates the mode of a list of numbers.
    :param data: List of numbers.
    :return: Mode of the numbers. In case of ties, returns the smallest mode.
    """
    if not data:
        raise ValueError("Input data cannot be empty.")

    frequency_map = {}
    for value in data:
        frequency_map[value] = frequency_map.get(value, 0) + 1

    highest_frequency = max(frequency_map.values())
    mode_candidates = [key for key, count in frequency_map.items() if count == highest_frequency]

    return min(mode_candidates)  # Return the smallest mode in case of a tie


# Example usage (uncomment to test):
# sample_data = [1, 2, 2, 3, 4]
# print("Mean:", calculate_mean(sample_data))
# print("Median:", calculate_median(sample_data))
# print("Mode:", calculate_mode(sample_data))

